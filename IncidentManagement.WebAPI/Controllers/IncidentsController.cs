using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using IncidentManagement.WebAPI.DatabaseContext;
using IncidentManagement.WebAPI.Models;
using IncidentManagement.WebAPI.DTO;
using IncidentManagement.WebAPI.Helpers;

namespace IncidentManagement.WebAPI.Controllers
{
    /*
     database structure
incidents -> accounts -> contacts
incident -> account, 1=>M,
account -> contact , 1=> M. 
Incident, incident name - primary key, autogenerated, string
Account, Name - > unique string field 


Functionality
create web api, asp core, ef code first (edited) 
Introduce the API to create the following records: contacts, accounts, incidents (edited) 
account cannot be created without contact
case cannot be created without account
logic for incident creation method


Request example
request body
{
account name,
contact first name,
contact last name,
contact email, // unique identifier,
incident description,
}


Validation
if account name is not in the system -> API must return 404 – NotFound
if contact is in the system (check by email) -> update contact record, link contact to account if it has not been linked prevoisly.
Otherwise, 
create new contact with first name, last name, email and 
link just created contact to the account
create new case, for account and populate case description field
     */


    [Route("api/[controller]/[action]")]
    [ApiController]
    public class IncidentsController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public IncidentsController(ApplicationDbContext context)
        {
            _context = context;
        }

        [HttpPost]
        public async Task<IActionResult> CreateAccount([FromBody] AccountRequest request)
        {
            var contact = await _context.Contacts
                .FirstOrDefaultAsync(c => c.Email == request.ContactEmail);

            if (contact != null)
            {
                return Conflict("Contact already exists");
            }

            var account = new Account
            {
                AccountName = request.AccountName
            };

            contact = new Contact
            {
                FirstName = request.ContactFirstName,
                LastName = request.ContactLastName,
                Email = request.ContactEmail,
                Account = account
            };

            account.Contacts.Add(contact);

            _context.Accounts.Add(account);
            _context.Contacts.Add(contact);
            await _context.SaveChangesAsync();

            return Ok(new { account.AccountID, account.AccountName });
        }

        [HttpPost]
        public async Task<IActionResult> CreateIncident([FromBody] IncidentRequest request)
        {
            var account = await _context.Accounts
                .Include(a => a.Contacts)
                .FirstOrDefaultAsync(a => a.AccountName == request.AccountName);

            if (account == null)
            {
                return NotFound("Account not found");
            }

            var contact = account.Contacts.FirstOrDefault(c => c.Email == request.ContactEmail);
            if (contact == null)
            {
                contact = new Contact
                {
                    FirstName = request.ContactFirstName,
                    LastName = request.ContactLastName,
                    Email = request.ContactEmail,
                    AccountID = account.AccountID
                };
                _context.Contacts.Add(contact);
            }
            else
            {
                contact.FirstName = request.ContactFirstName;
                contact.LastName = request.ContactLastName;
            }

            var incident = new Incident
            {
                IncidentName = IncidentNameGenerator.GenerateNextKey(_context).Result,
                Description = request.IncidentDescription,
            };

            incident.Accounts.Add(account);
            _context.Accounts.Add(account);
            _context.Incidents.Add(incident);
            await _context.SaveChangesAsync();

            return Ok(new { incident.IncidentName, incident.Description });
        }
    }
}
